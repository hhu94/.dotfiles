#!/usr/bin/env bash

# Modified from https://github.com/holman/dotfiles/blob/master/script/bootstrap
# Used in https://github.com/hhu94/.dotfiles
# By Hao Hu - @hhu94

cd "$(dirname "$0")"
DOTFILES_ROOT=$(pwd -P)

set -e

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

link_file () {
  local src=$1 dst=$2
  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && \
       [ "$skip_all" == "false" ]; then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;; S ) skip_all=true;; * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then  # "false" or empty
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H $DOTFILES_ROOT -maxdepth 2 -name '*.symlink' \
               -not -path '*.git*'); do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file $src $dst
  done
}

install_extras () {
  info 'installing extras'

  local overwrite_all=false backup_all=false skip_all=false

  # Link bin
  if ! [[ -s $HOME/bin ]]; then
    mkdir $HOME/bin
  fi
  for src in $(find -H $DOTFILES_ROOT/bin/*); do
    dst="$HOME/bin/${src##*/}"
    link_file $src $dst
  done

  # Link vim
  if ! [[ -s $HOME/.vim ]]; then
    mkdir $HOME/.vim
  fi
  for src in $(find -H $DOTFILES_ROOT/vim/ -name '*.vimlink'); do
    dst="$HOME/.vim/$(basename "${src%.*}")"
    link_file $src $dst
  done
}

install_vim_plugins () {
  printf "\r  [ \033[00;34m..\033[0m ] "
  read -p "do you want to install vim plugins? (y/n) " -n 1 -r
  echo
  if ! [[ $REPLY =~ ^[Yy]$ ]]; then
    return
  fi

  info 'installing vim plugins (logged at /tmp/install-vim-plugins.log)'

  if ! [[ -s $HOME/.vim/bundle/Vundle.vim ]]; then
    git clone https://github.com/VundleVim/Vundle.vim.git \
              ~/.vim/bundle/Vundle.vim &> /tmp/install-vim-plugins.log
    success "installed Vundle.vim at $HOME/.vim/bundle/Vundle.vim"
  fi

  info 'installing plugins, this may take a few minutes'
  vim +PluginInstall +qall &> /dev/null
  success "installed plugins into $HOME/.vim/bundle/"

  info 'precompiling YouCompleteMe, this may take a few minutes'
  ~/.vim/bundle/YouCompleteMe/install.py --clang-completer &>> \
      /tmp/install-install_vim_plugins.log
  success 'precompiled YouCompleteMe'
}

install_dotfiles
echo

install_extras
echo

install_vim_plugins
echo

success 'all installed!'
